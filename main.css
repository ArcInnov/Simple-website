/* Writing CSS in the HTML page is called internal CSS. However, it's a best practice to separate HTML structure and CSS styling. Having a separate CSS page is called external CSS. Code tends to be easier to read when it's concise and compartmentalized. You can use one or more external style sheets to service multiple webpages. Rather than updating each HTML page with replicated CSS code, you can make changes to a single CSS file, and have those updates applied to all of the dependent web pages */
/* One benefit of external CSS is that multiple HTML pages can link to the same CSS file. If you make a change to the CSS, your styling will update for each page. Using an HTML file for your page content, a CSS file for styling, and a JavaScript file for interaction is called separation of concerns. */

:root {
    --green: #00FF00;
    --white: #FFFFFF;
    --black: #000000;
  }
/* The :root selector represents the <html> element in the HTML page. For this kind of task, a best practice is to define a set of global CSS variables in a CSS rule with the :root selector. In this example, you've defined three color variables. You'll next be able to use these variables in other CSS rules  */

/*  
body {
    font-family: monospace;
}
*/
body {
    background: var(--bg);
    color: var(--fontColor);
    font-family: helvetica;
  }
  /* In this example, you use the body selector to set the background and color properties and, because the elements that are visible on the web page are all inside the <body> element, they'll inherit the colors set on <body>. */


  /*
ul {
    font-family: helvetica;
}
*/
/* The above code snippet contains two rules. Each rule has:

A selector. body and ul are the selectors of the two rules and are used to select which element(s) the styles apply to.
An opening curly brace ({).
A list of style declarations that determine what the selected elements should look like.
A closing curly brace (}).
For example, the ul selector selects the <ul> HTML element in the page, to apply styles to it. The declaration is font-family: helvetica and determines what the style should be. The property name is font-family, and the value is helvetica */
/* ID and class selectors enable you to apply styles to custom attribute names in your HTML. An ID is used to style one element, whereas classes can be used to style multiple elements. */

li {
    list-style: circle;
  }
  
  .list {
    list-style: square;
  }
  /*
  #msg {
    font-family: monospace;
  }
*/
  /* The preceding code contains three CSS rules, with the last two rules using custom attributes to select elements: .list and #msg.

.list is a class selector. Each HTML element that contains a class attribute set to list will get the styles that are defined within this selector.

#msg is an ID selector. The HTML element that has its id attribute set to msg will get the styles that are defined within this selector.

The names that you use for your selectors can be arbitrary, as long as they match what you've defined in the HTML. */

/* s interesting how styles applied to the <body> are inherited on the <h1> element. We didn't define anything for <h1>, but it still got the font that was defined on <body>. This inheritance mechanism from parent elements to their descendants is one of the key aspects of CSS. However, the <li> elements have a different font, overriding the one set on <body> because they're also descendants of the <ul> element which you defined a style for.

Note that using Open In Default Browser in VS Code opens a new tab in the browser every time. To avoid opening a new tab, you can reload the tab that already contains your website instead.

To reload the tab press F5, which is the refresh keyboard shortcut, or press Ctrl+R on Windows */

/* .light-theme { 
    color: #000000;
    background: #00FF00;
  }*/

/*  #000000 specifies black for the font color, and #00FF00 specifies green for the background color.
*/
.light-theme {
    --bg: var(--green);
    --fontColor: var(--black);
    --btnBg: var(--black);
    --btnFontColor: var(--white);
  }
  .dark-theme {
    --bg: var(--black);
    --fontColor: var(--green);
    --btnBg: var(--white);
    --btnFontColor: var(--black);
  }
  /* In the preceding code, you defined two new variables, bg and fontColor, which specify a background and font color. These variables use the var keyword to set their property values to the variables previously specified in your :root selector. */
 /*   --btnBg: var(--black);
  --btnFontColor: var(--white);
   update the CSS for the light and dark theme. Define some new variables, --btnBg and --btnFontColor, to specify the button-specific background color and font color.
  */

  .btn {
    position: absolute;
    top: 20px;
    left: 250px;
    height: 50px;
    width: 50px;
    border-radius: 50%;
    border: none;
    color: var(--btnFontColor);
    background-color: var(--btnBg);
  }
/* et the color and background-color properties in this rule. They'll override the default ones set in the body rule of your CSS file. */
/* creates a round button to the right of the page heading. */

